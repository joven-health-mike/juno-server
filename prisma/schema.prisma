generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  firstName        String
  lastName         String
  username         String  @unique
  role             Role    @default(UNASSIGNED)
  email            String? @unique
  phone            String? @unique
  docsUrl          String?
  timeZoneIanaName String? @default("America/New_York")

  counselorRoomLink         String?
  counselorRoomLink2        String?
  counselorAppointments     Appointment[]
  counselorAssignedStudents User[]        @relation("CounselorStudents")
  counselorAssignedSchools  School[]      @relation("CounselorSchools")

  studentStatus              StudentStatus?
  studentAssignedCounselorId String?
  studentAssignedCounselor   User?          @relation("CounselorStudents", fields: [studentAssignedCounselorId], references: [id], onDelete: SetNull)
  studentAssignedSchoolId    String?
  studentAssignedSchool      School?        @relation(fields: [studentAssignedSchoolId], references: [id], onDelete: Cascade)
  studentGuardians           User[]         @relation("GuardianStudents")

  schoolAdminAssignedSchoolId String?
  schoolAdminAssignedSchool   School? @relation("SchoolAdminSchool", fields: [schoolAdminAssignedSchoolId], references: [id], onDelete: Cascade)

  schoolStaffAssignedSchoolId String?
  schoolStaffAssignedSchool   School? @relation("SchoolStaffSchool", fields: [schoolStaffAssignedSchoolId], references: [id], onDelete: Cascade)

  guardianStudents User[] @relation("GuardianStudents")

  participantAppointments Appointment[] @relation("ParticipantAppointment")
}

model School {
  id           String        @id @default(uuid())
  name         String
  address      String?
  state        String?
  city         String?
  zip          String?
  primaryEmail String?
  primaryPhone String?
  docsUrl      String?
  appointments Appointment[]
  admins       User[]        @relation("SchoolAdminSchool")
  staff        User[]        @relation("SchoolStaffSchool")
  students     User[]
  counselors   User[]        @relation("CounselorSchools")
}

model Appointment {
  id       String               @id @default(uuid())
  title    String
  start    DateTime
  end      DateTime
  status   AppointmentStatus    @default(SCHEDULED)
  type     AppointmentType?     @default(UNKNOWN)
  location AppointmentLocation? @default(UNKNOWN)

  isRecurring    Boolean?         @default(false)
  numOccurrences Int?             @default(0)
  numRepeats     Int?             @default(0)
  frequency      RepeatFrequency? @default(WEEKS)

  counselorUserId String?
  counselor       User?   @relation(fields: [counselorUserId], references: [id], onDelete: Cascade)

  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  participants User[] @relation("ParticipantAppointment")
}

enum RepeatFrequency {
  DAYS
  WEEKS
  MONTHS
  YEARS
}

enum Role {
  JOVEN_ADMIN
  JOVEN_STAFF
  SCHOOL_ADMIN
  SCHOOL_STAFF
  STUDENT
  TEACHER
  GUARDIAN
  COUNSELOR
  SYSADMIN
  UNASSIGNED
}

enum StudentStatus {
  ACTIVE
  DISCHARGED
  DELETED
}

enum AppointmentType {
  CLINICAL
  CONSULTATION
  EVALUATION
  UNKNOWN
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  ONGOING
  FINISHED
  DELETED
}

enum AppointmentLocation {
  VIRTUAL_SCHOOL
  VIRTUAL_HOME
  IN_PERSON
  UNKNOWN
}
