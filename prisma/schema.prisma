// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String? @unique
  username String  @unique
  phone    String? @unique

  firstName String
  lastName  String

  docsUrl String?

  counselorRoomLink         String?
  counselorAssignedStudents User[]        @relation(name: "CounselorStudents")
  counselorAppointments     Appointment[]
  counselorAssignedSchools  School[]      @relation(name: "CounselorSchools")

  schoolAdminAssignedSchool   School? @relation(name: "SchoolAdminSchool", fields: [schoolAdminAssignedSchoolId], references: [id])
  schoolAdminAssignedSchoolId String?

  schoolStaffAssignedSchool   School? @relation(name: "SchoolStaffSchool", fields: [schoolStaffAssignedSchoolId], references: [id])
  schoolStaffAssignedSchoolId String?

  guardianStudents User[] @relation(name: "GuardianStudents")

  studentAssignedCounselor   User?          @relation(name: "CounselorStudents", fields: [studentAssignedCounselorId], references: [id])
  studentAssignedCounselorId String?
  studentAssignedSchool      School?        @relation(fields: [studentAssignedSchoolId], references: [id])
  studentAssignedSchoolId    String?
  studentStatus              StudentStatus?
  studentGuardians           User[]         @relation(name: "GuardianStudents")

  timeZoneIanaName String? @default("America/Denver")

  role Role

  participantAppointments Appointment[] @relation(name: "ParticipantAppointment")
}

model School {
  id           String        @id @default(uuid())
  name         String
  address      String?
  state        String?
  city         String?
  zip          String?
  primaryEmail String?
  primaryPhone String?
  students     User[]
  counselors   User[]        @relation(name: "CounselorSchools")
  admins       User[]        @relation(name: "SchoolAdminSchool")
  staff        User[]        @relation(name: "SchoolStaffSchool")
  appointments Appointment[]
}

model Appointment {
  id              String               @id @default(uuid())
  title           String
  start           DateTime
  end             DateTime
  isRecurring     Boolean?             @default(false)
  numOccurrences  Int?
  numRepeats      Int?
  frequency       RepeatFrequency?
  participants    User[]               @relation(name: "ParticipantAppointment")
  type            AppointmentType
  status          AppointmentStatus
  location        AppointmentLocation?
  counselor       User?                @relation(fields: [counselorUserId], references: [id])
  counselorUserId String?
  school          School?              @relation(fields: [schoolId], references: [id])
  schoolId        String?
}

enum RepeatFrequency {
  DAYS
  WEEKS
  MONTHS
  YEARS
}

enum Role {
  JOVEN_ADMIN // Internal administration
  JOVEN_STAFF
  SCHOOL_ADMIN
  SCHOOL_STAFF // Staff 
  STUDENT
  GUARDIAN // Parents or guardians at home who can:
  // - log the student in
  // - see the student's records and information
  COUNSELOR
  SYSADMIN
}

enum StudentStatus {
  ACTIVE
  DISCHARGED
  DELETED
}

enum AppointmentType {
  CLINICAL
  CONSULTATION
  EVALUATION
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  ONGOING
  FINISHED
  DELETED
}

enum AppointmentLocation {
  VIRTUAL_SCHOOL
  VIRTUAL_HOME
  IN_PERSON
  UNKNOWN
}
