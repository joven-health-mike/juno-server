// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "postgresql://postgres:postgres@localhost:5555/juno_dev"
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique
  phone    String @unique

  firstName String
  lastName  String

  sysAdminRef    SysAdminDetails?
  counselorRef   CounselorDetails?
  schoolAdminRef SchoolAdminDetails?
  schoolStaffRef SchoolStaffDetails?
  guardianRef    GuardianDetails?    @relation(name: "GuardianUser")
  studentRef     StudentDetails?     @relation(name: "StudentUser")

  counselorAppointments   Appointment[] @relation(name: "CounselorAppointment")
  participantAppointments Appointment[] @relation(name: "ParticipantAppointment")
}

model SysAdminDetails {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model CounselorDetails {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           Int              @unique
  roomLink         String
  assignedStudents StudentDetails[] @relation(name: "StudentCounselor")
}

model SchoolAdminDetails {
  id               Int    @id @default(autoincrement())
  user             User   @relation(fields: [userId], references: [id])
  userId           Int    @unique
  assignedSchool   School @relation(name: "SchoolAdminSchool", fields: [assignedSchoolId], references: [id])
  assignedSchoolId Int
}

model SchoolStaffDetails {
  id               Int    @id @default(autoincrement())
  user             User   @relation(fields: [userId], references: [id])
  userId           Int    @unique
  assignedSchool   School @relation(name: "SchoolStaffSchool", fields: [assignedSchoolId], references: [id])
  assignedSchoolId Int
}

model GuardianDetails {
  id              Int            @id @default(autoincrement())
  user            User           @relation(name: "GuardianUser", fields: [userId], references: [id])
  userId          Int            @unique
  assignedStudent StudentDetails @relation(name: "GuardianStudent", fields: [studentId], references: [id])
  studentId       Int
}

model StudentDetails {
  id                Int               @id @default(autoincrement())
  user              User              @relation(name: "StudentUser", fields: [userId], references: [id])
  userId            Int               @unique
  assignedCounselor CounselorDetails  @relation(name: "StudentCounselor", fields: [counselorId], references: [id])
  counselorId       Int
  assignedSchool    School            @relation(name: "StudentSchool", fields: [assignedSchoolId], references: [id])
  assignedSchoolId  Int
  guardians         GuardianDetails[] @relation(name: "GuardianStudent")
  status            StudentStatus
}

enum StudentStatus {
  ACTIVE
  DISCHARGED
}

model School {
  id           Int                  @id @default(autoincrement())
  name         String
  address      String
  state        String
  zip          String
  primaryEmail String
  primaryPhone String
  schoolAdmins SchoolAdminDetails[] @relation(name: "SchoolAdminSchool")
  schoolStaff  SchoolStaffDetails[] @relation(name: "SchoolStaffSchool")
  students     StudentDetails[]     @relation(name: "StudentSchool")
}

model Appointment {
  id           Int               @id @default(autoincrement())
  title        String
  start        DateTime
  end          DateTime
  counselor    User              @relation(name: "CounselorAppointment", fields: [counselorId], references: [id])
  counselorId  Int
  participants User[]            @relation(name: "ParticipantAppointment")
  type         AppointmentType
  status       AppointmentStatus
}

enum Role {
  JOVEN_ADMIN // Internal administration
  JOVEN_STAFF
  SCHOOL_ADMIN
  SCHOOL_STAFF // Staff 
  STUDENT
  GUARDIAN // Parents or guardians at home who can:
  // - log the student in
  // - see the student's records and information
  COUNSELOR
  SYSADMIN
}

enum AppointmentType {
  CLINICAL
  CONSULTATION
  EVALUATION
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  ONGOING
  FINISHED
  DELETED
}

enum AppointmentLocation {
  VIRTUAL_SCHOOL
  VIRTUAL_HOME
  IN_PERSON
}
